trigger:
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  scheme: 'WhiteLabel'
  xcWorkspacePath: '$(Build.SourcesDirectory)/WhiteLabel.xcworkspace'
  IPA_NAME: 'WhiteLabel.ipa'
  APP_VERSION: '14'

steps:
- checkout: self

# Instalação fastlane
- script: gem install fastlane
  displayName: 'Atualizar Fastlane'

- script: fastlane --version
  displayName: 'Verificar versão do Fastlane'

# Instalação de Certificados e Perfil de Provisionamento
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'CertificatesDistribution.p12'
    certPwd: '$(P12_PASSWORD)'
    keychain: 'temp'

- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'DistributionWhiteLabel.mobileprovision'
  displayName: 'Install Apple Provisioning Profile'

# Preparação do ambiente
- script: |
    cd $(Build.SourcesDirectory)
    pod update
    pod install
  displayName: 'CocoaPods install'

- script: |
    rm -rf ~/Library/Developer/Xcode/DerivedData/
    xcodebuild clean
  displayName: 'Clean Xcode data'

# Verificações
- script: |
    if [ ! -f $(Build.SourcesDirectory)/ExportOptions.plist ]; then
      echo "Error: ExportOptions.plist not found!"
      exit 1
    fi
  displayName: 'Check ExportOptions.plist exists'

- script: |
    # Ensure Export directory exists and create it if necessary
    mkdir -p $(Build.ArtifactStagingDirectory)/
    
    # Set permissions for Export directory to ensure it's writable
    chmod 755 $(Build.ArtifactStagingDirectory)/

    # Check if Export directory is writable
    if [ ! -d "$(Build.ArtifactStagingDirectory)/" ]; then
        echo "Error: Export directory not found or not writable!"
        exit 1
    fi
  displayName: 'Prepare Export Directory'

# Atualização do Info.plist
- script: |
    infoPlistPath="$(Build.SourcesDirectory)/$(scheme)/Info.plist"
    chmod 644 $infoPlistPath
    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $(BUNDLE_ID)" $infoPlistPath

    echo "Fetching current version using PlistBuddy..."
    current_version=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" $infoPlistPath)
    $(APP_VERSION) = current_version
    echo "Extracted Current Version: $current_version"

    # Check if the current version is a number
    if ! [[ "$current_version" =~ ^[0-9]+$ ]]; then
        echo "Current version is not a number. Exiting."
        exit 1
    fi

    echo "Incrementing version using APP_VERSION variable..."
    echo "Current APP_VERSION: $APP_VERSION"
    new_version=$((APP_VERSION + 1))
    echo "New Version to be set: $new_version"

    /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $new_version" $infoPlistPath

    # Re-fetch and print the updated version for confirmation
    updated_version=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" $infoPlistPath)
    echo "Updated Version in Info.plist: $updated_version"

# Debugging Steps (End)

# - script: bundle exec fastlane run increment_build_number build_number:$(Build.BuildId) xcodeproj:$(xcWorkspacePath)
#   displayName: Update Build Number

# Atualização do BuildNumber
- script: fastlane run increment_build_number build_number:$(APP_VERSION) xcodeproj:$(Build.SourcesDirectory)/$(scheme).xcodeproj
  displayName: Update Build Number

# Arquivo e Exportação
- script: |      
    # Archiving
    echo "Arquivando $(scheme)..."
    xcodebuild archive -workspace $(xcWorkspacePath) -scheme $(scheme) \
    -archivePath $(Build.SourcesDirectory)/build/$(scheme).xcarchive

    # Check .xcarchive generation
    ARCHIVE_PATH="$(Build.SourcesDirectory)/build/$(scheme).xcarchive"
    if [ ! -d "$ARCHIVE_PATH" ]; then
        echo "Erro: Arquivo .xcarchive não encontrado após o arquivamento!"
        exit 1
    fi

    # Export to create IPA from .xcarchive
    echo "Exportando IPA para $(scheme)..."
    EXPORT_PATH="$(Build.ArtifactStagingDirectory)/$(scheme)"
    xcodebuild -exportArchive -archivePath $ARCHIVE_PATH \
    -exportOptionsPlist $(Build.SourcesDirectory)/ExportOptions.plist \
    -exportPath $EXPORT_PATH

    # List contents of the export directory
    echo "Conteúdo do diretório de exportação:"
    ls -la $EXPORT_PATH

    # Validate IPA existence with the adjusted path
    IPA_PATH="$EXPORT_PATH/$(IPA_NAME)"
    if [ ! -f "$IPA_PATH" ]; then
        echo "Erro: IPA não encontrado em $IPA_PATH!"
        exit 1
    else
        echo "IPA encontrado: $IPA_PATH"
    fi
  displayName: 'Archive and Export IPA'

# - script: |
#     xcodebuild archive -workspace $(xcWorkspacePath) -scheme $(scheme) -archivePath $(Build.SourcesDirectory)/build/WhiteLabel.xcarchive
#   displayName: 'Archive Project'
  
#Envio para AppStore
- task: AppStoreRelease@1
  inputs:
    serviceEndpoint: 'App Store Connect'
    releaseTrack: 'TestFlight'
    appIdentifier: 'br.com.systemsat.whitelabelssx'
    appType: 'iOS'
    ipaPath: "$(Build.ArtifactStagingDirectory)/$(scheme)/WhiteLabel.ipa"
    shouldSkipWaitingForProcessing: true
    shouldSkipSubmission: true
    # appSpecificPassword: 'f4b945b1608b45d6a89ddcd22be5baf8'
    appSpecificId: 'opnh-zkuo-ayfu-szvk'
    apiKeyId: '96KGBK2Q6J'
    apiKeyIssuerId: '69a6de84-fb7c-47e3-e053-5b8c7c11a4d1'