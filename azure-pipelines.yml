trigger:
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  scheme: 'WhiteLabel'
  xcWorkspacePath: '$(Build.SourcesDirectory)/WhiteLabel.xcworkspace'
  IPA_NAME: 'WhiteLabel.ipa'

steps:
# Checkout develop branch explicitly
- script: |
    git remote update
    git fetch 
    git checkout --track origin/develop
    git pull origin develop
  displayName: 'Checkout and update develop branch'

# Instalação de Certificados e Perfil de Provisionamento
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'CertificatesDistribution.p12'
    certPwd: '$(P12_PASSWORD)'
    keychain: 'temp'

- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'DistributionWhiteLabel.mobileprovision'
  displayName: 'Install Apple Provisioning Profile'

# Download do securyFile
- task: DownloadSecureFile@1
  name: appStoreKey
  inputs:
    secureFile: 'AuthKey_96KGBK2Q6J.p8'

- script: echo $(appStoreKey.secureFilePath)
  displayName: 'Imprimir caminho do arquivo .p8'

- script: cat $(appStoreKey.secureFilePath)
  displayName: 'Imprimir conteúdo do arquivo .p8'

# Preparação do ambiente
  # Instalação dos pods
- script: |
    cd $(Build.SourcesDirectory)
    pod update
    pod install
  displayName: 'CocoaPods install'
  
  # Limpeza do derivedData
- script: |
    rm -rf ~/Library/Developer/Xcode/DerivedData/
    xcodebuild clean
  displayName: 'Clean Xcode data'

# Verificações
- script: |
    if [ ! -f $(Build.SourcesDirectory)/ExportOptions.plist ]; then
      echo "Error: ExportOptions.plist not found!"
      exit 1
    fi
  displayName: 'Check ExportOptions.plist exists'

- script: |
    # Ensure Export directory exists and create it if necessary
    mkdir -p $(Build.ArtifactStagingDirectory)/
    
    # Set permissions for Export directory to ensure it's writable
    chmod 755 $(Build.ArtifactStagingDirectory)/

    # Check if Export directory is writable
    if [ ! -d "$(Build.ArtifactStagingDirectory)/" ]; then
        echo "Error: Export directory not found or not writable!"
        exit 1
    fi
  displayName: 'Prepare Export Directory'

# Atualização do Build
- task: ios-bundle-version@1
  inputs:
    sourcePath: '$(Build.SourcesDirectory)/$(scheme)/Info.plist'
    versionCodeOption: 'buildid'
    versionCode: '$(Build.BuildId)'
    printFile: true

# Configura o agente SSH
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: '<known hosts entry>'
    sshPublicKey: '<public SSH key>'
    sshKeySecureFile: '<Secure file id>'

# Commit updated Info.plist to develop branch
- script: |
    git config --global user.email "ianfag@icloud.com"
    git config --global user.name "Azure DevOps Build"
    git remote set-url origin git@github.com:ianfagundes84/fastlane-ssx.git
    git add $(Build.SourcesDirectory)/$(scheme)/Info.plist
    git commit -m "Automatically updated build version to $(Build.BuildId)"
    ssh -T git@github.com
    git push origin develop
  displayName: 'Commit updated Info.plist to develop branch'
  env:
    GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"

# Arquivo e Exportação
- script: |      
    # Archiving
    echo "Arquivando $(scheme)..."
    xcodebuild archive -workspace $(xcWorkspacePath) -scheme $(scheme) \
    -archivePath $(Build.SourcesDirectory)/build/$(scheme).xcarchive

    # Check .xcarchive generation
    ARCHIVE_PATH="$(Build.SourcesDirectory)/build/$(scheme).xcarchive"
    if [ ! -d "$ARCHIVE_PATH" ]; then
        echo "Erro: Arquivo .xcarchive não encontrado após o arquivamento!"
        exit 1
    fi

    # Export to create IPA from .xcarchive
    echo "Exportando IPA para $(scheme)..."
    EXPORT_PATH="$(Build.ArtifactStagingDirectory)/$(scheme)"
    xcodebuild -exportArchive -archivePath $ARCHIVE_PATH \
    -exportOptionsPlist $(Build.SourcesDirectory)/ExportOptions.plist \
    -exportPath $EXPORT_PATH

    # List contents of the export directory
    echo "Conteúdo do diretório de exportação:"
    ls -la $EXPORT_PATH

    # Validate IPA existence with the adjusted path
    IPA_PATH="$EXPORT_PATH/$(IPA_NAME)"
    if [ ! -f "$IPA_PATH" ]; then
        echo "Erro: IPA não encontrado em $IPA_PATH!"
        exit 1
    else
        echo "IPA encontrado: $IPA_PATH"
    fi
    unzip -q $(Build.ArtifactStagingDirectory)/$(scheme)/WhiteLabel.ipa -d extractedIPA
    cat extractedIPA/Payload/WhiteLabel.app/Info.plist
  displayName: 'Archive and Export IPA'

#Envio para AppStore
- task: AppStoreRelease@1
  inputs:
    serviceEndpoint: 'App Store Connect'
    releaseTrack: 'TestFlight'
    appIdentifier: 'br.com.systemsat.whitelabelssx'
    appType: 'iOS'
    ipaPath: "$(Build.ArtifactStagingDirectory)/$(scheme)/WhiteLabel.ipa"
    shouldSkipWaitingForProcessing: true
    shouldSkipSubmission: true
    appSpecificId: 'opnh-zkuo-ayfu-szvk'
    apiKeyId: '96KGBK2Q6J'
    apiKeyIssuerId: '69a6de84-fb7c-47e3-e053-5b8c7c11a4d1'