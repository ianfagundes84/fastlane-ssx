trigger:
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  scheme: 'WhiteLabel'
  xcWorkspacePath: '$(Build.SourcesDirectory)/WhiteLabel.xcworkspace'
  IPA_NAME: 'WhiteLabel.ipa'
  APP_VERSION: '14'

steps:
- checkout: self

# Instalação de Certificados e Perfil de Provisionamento
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'CertificatesDistribution.p12'
    certPwd: '$(P12_PASSWORD)'
    keychain: 'temp'

- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'DistributionWhiteLabel.mobileprovision'
  displayName: 'Install Apple Provisioning Profile'

# Preparação do ambiente
- script: |
    cd $(Build.SourcesDirectory)
    pod update
    pod install
  displayName: 'CocoaPods install'

- script: |
    rm -rf ~/Library/Developer/Xcode/DerivedData/
    xcodebuild clean
  displayName: 'Clean Xcode data'

# Verificações
- script: |
    if [ ! -f $(Build.SourcesDirectory)/ExportOptions.plist ]; then
      echo "Error: ExportOptions.plist not found!"
      exit 1
    fi
  displayName: 'Check ExportOptions.plist exists'

- script: |
    # Ensure Export directory exists and create it if necessary
    mkdir -p $(Build.ArtifactStagingDirectory)/
    
    # Set permissions for Export directory to ensure it's writable
    chmod 755 $(Build.ArtifactStagingDirectory)/

    # Check if Export directory is writable
    if [ ! -d "$(Build.ArtifactStagingDirectory)/" ]; then
        echo "Error: Export directory not found or not writable!"
        exit 1
    fi
  displayName: 'Prepare Export Directory'

# Atualização do Info.plist
- script: |
    infoPlistPath="$(Build.SourcesDirectory)/$(scheme)/Info.plist"
    chmod 644 $infoPlistPath
    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $(BUNDLE_ID)" $infoPlistPath

    current_version=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" $infoPlistPath)
    new_version=$((APP_VERSION + 1))
    /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $new_version" $infoPlistPath
  displayName: 'Update Info.plist'

# Arquivo e Exportação
- script: |      
    # Archiving
    echo "Arquivando $(scheme)..."
    xcodebuild archive -workspace $(xcWorkspacePath) -scheme $(scheme) \
    -archivePath $(Build.SourcesDirectory)/build/$(scheme).xcarchive

    # Verificar se o arquivo .xcarchive foi gerado com sucesso
    if [ ! -d $(Build.SourcesDirectory)/build/$(scheme).xcarchive ]; then
        echo "Erro: Arquivo .xcarchive não encontrado após o arquivamento!"
        exit 1
    fi

    # Exportação
    echo "Exportando IPA para $(scheme)..."
    xcodebuild -exportArchive -archivePath $(Build.SourcesDirectory)/build/$(scheme).xcarchive \
    -exportOptionsPlist $(Build.SourcesDirectory)/ExportOptions.plist \
    -exportPath $(Build.ArtifactStagingDirectory)/

    # Listar o conteúdo do diretório de exportação
    echo "Listando conteúdo do diretório de exportação..."
    ls -la $(Build.ArtifactStagingDirectory)/

    # Buscar pelo IPA
    echo "Buscando pelo arquivo IPA..."
    IPA_FILE=$(find $(Build.ArtifactStagingDirectory)/ -name "$(scheme).ipa*")
    if [ -z "$IPA_FILE" ]; then
        echo "Erro: IPA não encontrado!"
        exit 1
    else
        echo "IPA encontrado: $IPA_FILE"
    fi
  displayName: 'Archive and Export IPA'

# Publicar o IPA como um artefato
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(IPA_FILE)' 
    artifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish IPA as Artifact'

# Upload
- script: |
    # Listar o conteúdo do diretório de exportação
    echo "Listando conteúdo do diretório de exportação antes do upload..."
    ls -la $(Build.ArtifactStagingDirectory)/

    echo "Modificando permissões do arquivo IPA..."
    chmod 644 "$IPA_FILE"

    echo "Verificando a existência do IPA antes do upload..."
    if [ ! -f "$IPA_FILE" ]; then
      echo "Erro: IPA não encontrado em $IPA_FILE!"
      exit 1
    else
      echo "IPA encontrado em $IPA_FILE"
    fi

    retry_count=0
    max_retries=3
    while [ $retry_count -lt $max_retries ]
    do
      xcrun altool --upload-app --type ios --file "$IPA_FILE" --username $(APPLE_DEVELOPER_USERNAME) --password $(APPLE_DEVELOPER_PASSWORD)
      retry_count=$((retry_count+1))
      echo "Retry $retry_count/$max_retries..."
      sleep 10
    done
    if [ $retry_count -eq $max_retries ]; then
      echo "Failed to upload after $max_retries attempts. Exiting..."
      exit 1
    fi
  displayName: 'Upload to App Store'
