trigger:
- develop

pool:
  vmImage: 'macOS-latest'

variables:
  scheme: 'WhiteLabel'
  xcWorkspacePath: '$(Build.SourcesDirectory)/WhiteLabel.xcworkspace'
  infoPlistPath: '$(Build.SourcesDirectory)/WhiteLabel/Info.plist'

steps:
- checkout: self

- script: ls -R $(Build.SourcesDirectory)
  displayName: 'Print directory structure'

- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'CertificatesDistribution.p12'
    certPwd: '$(P12_PASSWORD)'
    keychain: 'temp'
  
- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'DistributionWhiteLabel.mobileprovision'
  displayName: 'Install Apple Provisioning Profile'

- script: |
    cd $(Build.SourcesDirectory)
    pod update
    pod install
  displayName: 'CocoaPods install'

- script: rm -rf ~/Library/Developer/Xcode/DerivedData/
  displayName: 'Clean Derived Data'

- script: echo 'Clean build folder' && xcodebuild clean
  displayName: 'Clean Build Folder'

# Debugging Steps (Init)
- script: echo $(xcWorkspacePath)
  displayName: 'Print xcWorkspacePath'
  
- script: ls -la $(Build.SourcesDirectory)
  displayName: 'List files in source directory'

- script: xcodebuild -list -workspace $(xcWorkspacePath)
  displayName: 'List Available Schemes'
  
- script: |
    security find-identity -v -p codesigning
  displayName: 'List installed certificates'
# Debugging Steps (End)

# # Increment Version Before Upload
# - script: |
#     current_version=$(defaults read $(infoPlistPath) CFBundleVersion)
#     echo "Current Version: $current_version"
#     new_version=$((current_version + 1))
#     echo "New Version: $new_version"
#     defaults write $(infoPlistPath) CFBundleVersion $new_version
#   displayName: 'Increment CFBundleVersion'

# Debug: Display Info.plist Before Update
- script: cat $(infoPlistPath)
  displayName: 'Debug: Display Info.plist Before Update'

# Increment Version Before Upload
- script: |
    plutil -replace CFBundleVersion -string "$(Build.BuildId)" $(infoPlistPath)
  displayName: 'Increment CFBundleVersion using plutil'

# Debug: Display Info.plist After Update
- script: cat $(infoPlistPath)
  displayName: 'Debug: Display Info.plist After Update'

- task: Xcode@5
  inputs:
    actions: 'clean build'
    xcWorkspacePath: '$(xcWorkspacePath)'
    scheme: '$(scheme)'
    sdk: 'iphoneos'
    configuration: 'Release'
    useXcpretty: false
    signingOption: 'manual'
    exportOptions: plist
    signingIdentity: '$(CODE_SIGN_IDENTITY)'
    provisioningProfileUUID: '$(APPLE_PROV_PROFILE_UUID)'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'drop'

# Debugging Steps (Init)
- script: ls -R $(Build.SourcesDirectory)/
  displayName: 'Debug: List files in specified directory'

- script: ls -R $(Build.ArtifactStagingDirectory)/
  displayName: 'Debug: List all files from Artifact Staging Directory'
# Debugging Steps (End)

- script: |
    xcodebuild archive -workspace $(xcWorkspacePath) -scheme $(scheme) \
    -archivePath $(Build.SourcesDirectory)/build/WhiteLabel.xcarchive
  displayName: 'Archive Project'
  
# Archive and export .ipa
- script: |
    xcodebuild -exportArchive -archivePath $(Build.SourcesDirectory)/build/WhiteLabel.xcarchive \
    -exportOptionsPlist $(Build.SourcesDirectory)/ExportOptions.plist \
    -exportPath $(Build.ArtifactStagingDirectory)
  displayName: 'Archive and export .ipa'

# Debugging Steps (Init)
- script: |
    unzip -q $(Build.ArtifactStagingDirectory)/WhiteLabel.ipa -d $(Pipeline.Workspace)/a/WhiteLabel
    if [ -f "$(Pipeline.Workspace)/a/WhiteLabel/Payload/WhiteLabel.app/Info.plist" ]; then
      echo "Info.plist file found."
    else
      echo "Info.plist file not found. Exiting."
      exit 1
    fi
  displayName: 'Validate Info.plist in IPA'

- script: cat $(Pipeline.Workspace)/a/WhiteLabel/Payload/WhiteLabel.app/Info.plist
  displayName: 'Display Info.plist for debugging'
# Debugging Steps (End)

- script: |
    xcrun altool --upload-app -f "$(Build.ArtifactStagingDirectory)/WhiteLabel.ipa" \
    -t ios -u '$(APPLE_DEVELOPER_USERNAME)' -p '$(APPLE_DEVELOPER_PASSWORD)'
  displayName: 'Upload to TestFlight'

